//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Desktop.Analyzers {
    using System;
    using System.Reflection;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class DesktopAnalyzersResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal DesktopAnalyzersResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Desktop.Analyzers.DesktopAnalyzersResources", typeof(DesktopAnalyzersResources).GetTypeInfo().Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not catch corrupted state exceptions in general handlers..
        /// </summary>
        internal static string DoNotCatchCorruptedStateExceptions {
            get {
                return ResourceManager.GetString("DoNotCatchCorruptedStateExceptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not author general catch handlers in code that receives corrupted state exceptions. Code that receives and intends to handle corrupted state exceptions should author distinct handlers for each exception type..
        /// </summary>
        internal static string DoNotCatchCorruptedStateExceptionsDescription {
            get {
                return ResourceManager.GetString("DoNotCatchCorruptedStateExceptionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modify {0} to catch and handle a more specific set of exception type(s) than {1} or rethrow the exception. .
        /// </summary>
        internal static string DoNotCatchCorruptedStateExceptionsMessage {
            get {
                return ResourceManager.GetString("DoNotCatchCorruptedStateExceptionsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wrap vulnerable finally clauses in outer try.
        /// </summary>
        internal static string WrapVulnerableFinallyClausesInOuterTry {
            get {
                return ResourceManager.GetString("WrapVulnerableFinallyClausesInOuterTry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Finally clauses that restore security-related state created by impersonation wrapper  should be wrapped in an outer try block. This will prevent an exception filter further up the stack from executing before a secure environment can be restored. Exception filters that run code expressions in the first pass after the guarded try blocks and before the associated finally block represent a possible security vulnerability. Examples of vulnerable functionality in finally clauses that should be protected against t [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WrapVulnerableFinallyClausesInOuterTryDescription {
            get {
                return ResourceManager.GetString("WrapVulnerableFinallyClausesInOuterTryDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wrap the finally clause in {0} that calls {1} in an outer try block with an associated catch that simply rethrows..
        /// </summary>
        internal static string WrapVulnerableFinallyClausesInOuterTryMessage {
            get {
                return ResourceManager.GetString("WrapVulnerableFinallyClausesInOuterTryMessage", resourceCulture);
            }
        }
    }
}
